# 스프링의 지식체계 계열화
1. 스프링의 기본 개념
	1) 스프링 MVC
	2) 컨테이너
	3) 제어역전(DI)
2. 스프링환경 설정(스프링 1단계)
	1) 단계별 스프링 환경
		- 1단계 : dynamic web project기반 스프링 환경 결정
		- 2단계 : sts(spring tool suits) 툴을 이용한 스트링 부트 활용
	2) lib : 필요한 jar 파일 복사
		필요로 하는 웹 프로그램의 framework 활용
	3) 컨테이너 설정
		스프링 핵심(core) 처리로 xml 파일로 설정한다. 
			(dispatcher-servlet.xml)
		src\main\webapp\WEB-INF 가 default 설정 위치
	4) web.xml 설정
		스프링 프레임 워크 시작 front-controller 설정
			dispatcherservlet(프레임워크 지원 클래스)
			- 위 컨테이너 설정의 위치를 변경할 수 있다.
		요청값(get/post)의 한글 처리를 위한 filtering 선언
			(프레임워크 지원 클래스)
	5) MVC처리를 위한
		사용자 정의 controller/service/dao 선언
		view단 선언 : WEB-INF하위에 보안폴드로 jsp/html 호출
	6) 기타 front 프레임워크 및 lib 설정
		- boot strap 설정
		- jquery 설정
	7) 초기 view단에서 위 front단 프레임워크 lib 호출 처리
3. 스프링 MVC 처리 순서에 대한 이해 및 각각의 기능
	1) client url을 통해 요청
		http://아이피:port/springweb/start.do
		http://localhost:7780/springweb/start.do
		
		http://localhost:7780/springweb
		web.xml에서 default welcome 파일이 호출
			webapp하위 index.html/index.jsp
			
		
	2) server에서 처리 프로세스
		- web.xml
			설정된 내용 확인
			welcome 선언된 파일 호출 index.html
			controller에서 return ""; 를 선언되었을 대도 위 파일이 호출된다.
			
		 url 패턴 확인
		  1. 마지막에 *.do로 끝나면 dispatcher 서블릿을 호출
		  2. dispatcher : front-controller인 스프링의 DispatcherServlet을 호출
		  3.  DispatcherServlet 객체는 컨테이너 설정을 포함하여 가지고 있는데,
		 - dispatcher-servlet.xml
		  4. 이 컨테이너 설정 위치가 default WEB-INF하위에 dispatcher-servlet.xml로
		  5. XXX-servlet.xml에서 XXXX은 <servlet-name>dispatcher</servlet-name>에 의해 설정되어
		  	ex) <servlet-name>dis</servlet-name>
		  		==> WEB-INF 하위에 dis-servlet.xml
		  6. 컨테이너(dispatcher-servlet.xml)를 호출하고, 
		  7. 컨테이너에 선언되어 있는 객체들을 메모리에 로딩한다.
		  		<bean class="springweb.a01_start.A01_Controller"/>
		  		ps) 메모리에 로딩된 상태에서 실행되는 것과 호출할 때, 메모리에 로딩되어 처리하는 것의 속도 차이
		  		
		 - Controller : @Controller(선언이 되야함)
		  8. 컨테이너에 선언된 컨트롤러 중에../start.do 패턴으로 선언된 메서드를 찾아간다.
		  9. @RequestMapping("/start.do")(get/post 방식 둘다 처리) 로 선언된 메서드에서
		  	 @GetMapping : get방식 일떄만 처리
		  	 @PostMapping : post방식 일떄만 처리
		  	 # 주의 
				1. 스프링은동일한 클래스로 controller명을 선언하지 못 한다.
					보통 패키지가 다르면 클래스르 중첩적으로 사용할 수 있는데,
					클래스에서 객체 로딩시 에러 발생 
						springweb.a01_start.A01_MVCController.java
						@Controller("A01_MVCController") 
							- DL id bean를 클래스명의 소문자로 설정
						
						springweb.a02_mvc.A01_MVCController.java
						@Controller("mvcController")
							- DL명을 명시적으로 변경을 해야지 에러가 발생하지 않음.
				2. url mapping을 동일한 이름을 설정하면 에러발생.
					Ambiguous mapping
					@RequestMapping("/start.do")
					등록된 모든 클래스와 메서드와 중첩 url 불가.
							
		  10. 요청값은 메서드 매개변수로
		  11. 모델데이터는 Model d로 해서 처리가 되고
		  12. 기능 메서드의 return "\\views\\a01_start\\a01_start.jsp"에 의해 
		  		view단이 기본적으로 forward방식으로 호출되어
		  13. 해당 뷰단은 모델데이터와 함께 출력이 된다.
			   

4. 스프링 컨테이너 이해를 위한 DI 설정 이해(*)
	1) 클래스 선언으로 객체 DL(id값) 호출하기
	2) 기능 메서드 사용 property
	3) 1:1관계 설정하여 객체 연관 관계 설정하기
		ref = "선언된 객체의 id명"
		

5. 스프링 MVC 심화
	1) controller의 요청값 옵션
		메서드의 매개변수로 처리
		개별적 요청값 처리 @RequestParam("요청키") 데이터 유형 변수
		@RequestParam(value="요청키", defaultValue="") 데이터유형 변수
			요청키도 맞아야 되지만, 특징, 숫자형으로 요청할 떄는 숫자형이어야 한다.
			&empno=&ename=	==> <input name="empno" value="" />
			@RequestParam("empno") int empno(X)	- 에러발생 요청 url
				자체를 찾지 못한다.
				처리방법 : 요청값이 문자열에서 숫자형식으로 넘어가게 하여야 한다.
				1) &empno=0	==> <input name="empno" value="0" />
				2) XXX 요청값 자체가 없을 때는 
					@RequestParam("empno", defaultValue="0") int empno
			defaultValue 는 위와 같이 empno=@@ 라는 형식으로 요청값 자체가 없을 때,
			설정하는 부분이다.
		
		VO(property개념으로 요청키를 저장하는 처리)
			: 요청데이터+모델 (모델 어트리뷰터)
			public String empList(Emp sch)
				모델명이 emp
			# 모델 어트리뷰트 이름을 다르게 처리할 떄
			public String empList(@ModelAttribute("sch") Emp sch)
			
			# VO와 요청값 처리 형태
			1. 요청값이 없을 떄,
				public String empList(Emp sch)는 정상적으로 호출이 된다.
				소속되어 있는 문자열/객체 : null
				소속되어 있는 숫자형(실수/정수) : 0
				소속되어 있는 boolean : false로 설정이 된다.
				${emp.XXX}
			2. 요청값이 있을 떄,(&empno=1000&ename=홍길동)
				property와 type확인해서 할당이 가능한 경우
				1) 요청키이름과 데이터 유형이 문자열
					public void setEmpno(String empnos)(O)		
					public void setEname(String ename)(O)
				2) 요청키이름과 데이터 유형이 숫자형
					public void setEmpno(int empno)(O)
					public void setEname(int ename)(X)
						해당 url을 찾지 못 함.
	2) 모델 설정
		메서드의 매개변수 : Model d, d.addAttribute("모델명",모델객체);
		
	3) 뷰단 처리
		- return "호출할 html/jsp/json데이터" ***(forword방식)으로 호출하면서 모델데이터를 넘긴다.
		- 선언된 controller url(요청 메서드)를 호출할 떄,
			return "WEB-INF/views/a01.start.jsp" forward
				방식으로 요청값, 모델데이터와 함께 view단 호출
			return "redirect:/empList.do" : redirect방식으로 호출
				정의된 controller의 메서드
			return "forward:/empList.do"  : forward방식으로 호출
				정의된 controller의 메서드
		ex) redirect방식과 forward방식의 차이
			response.sendRedirect("페이지") : redirect
				- 페이지를 호출하면서 request,response를 해당 페이지에 전송하지 않는다.
				 controller에서 선언한 모델데이터, 쿠키값을 전달하지 못한다.
				- url주소를 해당 이름으로 변경되어 처리한다.
			request.getRequestDispatcher("페이지").forward(request,response);
				forward 방식
				- request, response를 전달하기에 모델데이터를 전달할 수 있다.
				- url주소는 변경되지 않고 기존 url mapping 방식으로 전달된다.
	4) session 활용
6. 스프링의 database 처리를 위한 mybatis framework 활용
	1) 1단계 기존 DAO활용
	2) 2단계 MYBAITS활용 : 컨테이너에 @@@.jar된 framework 등록하여 처리하는 패턴
7. 기타 실무예제
	1) 파일업로드/다운로드
	2) ajax 처리1
		기초
		jquery lib 활용 fullcalendar lib 사용
		vue 연동 처리
	3) 웹 소켓을 활용한 실시간 채팅
	4) 다국어 처리
	5) 메일 발송
	6) aop
	7) 페이지 처리 답변형 게시판(첨부파일)
		- 세션 로그인 처리 후(세션), 등록자 세션(수정 삭제 권한)
	
# 스프링 MVC 해보기
1. controller롤 뷰단 호출
	1) Controller만들기 @Controller 선언
		springweb.a01_start.A01_Controller.java
		// http://localhost:7080/springweb/start.do
		@RequestMapping("/start.do")
		public String start(){
			return "/views/a01_start/a01_start.jsp";
		}
		// 위 주소를 호출할 때, return 할 view을 forward 처리한다.
		
	2) View단 선언
		WEB-INF/views/a01_start/a01_start.jsp
	
	3) container에 등록(dispatcher-servlet.xml)
		<bean class="springweb.a01_start.A01_Controller" />
		스프링은 일단, 첫번째 컨트롤러를 호출할 때, 컨테이너에서 클래스를 
		객체화하여 메모리에 로딩 후, 호출시에 로딩된 객체를 사용한다.
		
# 스프링의 MVC 처리
1. 요청값 처리
	/call.do?name=himan
	public String call(@RequestParam("name") String name){
		System.out.println("요청 이름:"+name);
	}
2. 모델 데이터 처리
	public String call(Model d)
3. 요청 및 모델 데이터 처리
	1) 초기 화면을 로딩
		초기 화면 로딩 메서드 선언
		@RequestMapping("call10.do")
		\WEB-INF\views\a01_start\a10_callCalcu.jsp
		<form action="${path}/call11.do">
			물건가격:<input type="text" name="price" />
			물건갯수:<input type="text" name="cnt" />
			<input type="submit" value="총계" />
			
	2) 요청값 전달
		@RequestParam("price") int price,
		@RequestParam("cnt") int cnt
		
	3) 요청값에 따라 모델 데이터 설정
		d.addAttribute("calcu",price*cnt);
		
	4) 화면 출력
		물건 가격: ${param.price}
		물건 갯수: ${param.cnt}
		총계 : ${calcu}
	
# 요청값의 VO 객체 처리(요청 + 모델)
1. 스프링은 요청값을 VO객체로 property개념으로 처리할 수 있다.
	- 이것을 modelAttribute라는 개념으로 사용하기도 한다.
2. useBean
	&ename=홍길동&empno=7800&&sal=3500.0
	이런 요청값이 있을 때, 선언된 클래스의 기능메서드
	setEname(String), setEmpno(int), setSal(double)
	이 선언되어 있으면 <jsp:setProperty name="*" 을 통해서 자동 할당이 객체에서 일어난다.
3. 스프링에서 요청값의 VO객체 할당 처리
	public String empSch(Emp sch){
		// 1. 이렇게 선언만 하면, 요청값이 위 객체 Emp에 property에
		// 타입과 이름이 맞는 요청값이 들어오면 객체에 할당이 된다.
		// 모델명을 객체의 소문자 시작명으로 처리된다.
		// Emp ==> emp, Dept ==> dept
		// 주의) 클래스명은 반드시 ~~
		// 2. 모델데이터까지 객체로 선언이 자동으로 된다.
		// 		${emp.ename} 
		// 3. 요청값이 없으면 해당 객체로 default 처리를 한다.
		//	주의) emp.do 요청값이 없으면 VO객체가 해당 내용을 자동으로 설정하는데 
		//		 emp.do?empno=홍길동 : 이렇게 VO객체에 type이 다른 property를 
		//		 호출하면 url 호출 조차 안된다.
		//		 emp.do?empno=&ename= : 이 경우도 empno를 차라리 설정하지 않으면 
		//		 호출되지만 empno= 은 ""공백데이터를 전달하기 setEmpno(int empno)
		//		 와 맞지 않아, http://localhost:7080/springweb/emp.do 자체가 호출되지 않는 페이지가 된다.
		
 	}
 	
 # 스프링 DB연결 1단계
 1. 흐름 순서
 	1) url 요청값 처리
 	2) controller호출
 	3) 모델 데이터 처리(dao호출 후, 데이터 설정)
 	4) view 화면 호출, 모델 데이터 출력
 2. 처리 순서
 	1) 처리할 데이터 sql, dao 처리
 	2) controller 작성 및 초기화면 로딩
 	3) dao호출 및 모델 데이터 할당
 	4) 모델 데이터에 맞게 화면단 구현
 3. 실제 핵심 코드
 		1) DAO 환경 구현
 		 	
 # 스프링 등록 처리
 1. DAO : sql ==> vo ==> 기능 메서드 
 2. controller 초기화면구성
 3. 화면에서 등록할 데이터 frm 만들기
 	- action = "등록컨트롤러메서드"
 4. 등록 처리 controller 기능메서드 추가
 	 1) 등록요청값 vo
 	 2) 등록 후, 처리할 controller선언.
 	 
# 모델어트리뷰트를 통한 DB와 연결된 공통 COMBOX 생성
1. select형태의 콤보형선택은 DB연결되어서 처리되는 경우가 많다.
2. controller단에서 공통으로 사용되는 key/value형식의 데이터는 ModelAttribute로 선언하여 사용한다.
3. 처리순서
	1) sql ==> dao 기능 메서드 추가
	2) controller단 modelattribute 선언
	3) view단에서 공통 modelattribute호출
4. 부서정보 및 관리자번호 콤보박스만들기
	1) Code테이블 생성 key/val
	2) sql 작성
		SELECT DISTINCT e.mgr code, m.ename val
		FROM emp100 e, emp100 m
		WHERE e.mgr = m.empno
		ORDER BY code;
		
		SELECT deptno code, dname val 
		FROM dept100
		ORDER BY code;
		
	3) dao기능 메서드 선언
		public List<Code> getMgrInf()
		public List<Code> getDeptInf()
	4) controller의 모델 attribute생성
		@ModelAttribute("mgrList")
		public List<Code> getMgrInf(){
			return dao.getMgrInf()
		}
		@ModelAttribute("deptCode")
		public List<Code> getDeptInf(){
			return dao.getDeptInf()
		}
	5) view단 처리
		<select name="mgr">
			<option value="0000">관리자선택</option>
			<c:forEach var="cd" items="${mgrCode}">
				<option value="${cd.key}">${cd.value}</option>
		<select name="deptno">
			<option value="00">부서선택</option>
			<c:forEach var="cd" items="${deptCode}">
				<option value="${cd.key}">${cd.value}</option>
	
	
		
	

	
	