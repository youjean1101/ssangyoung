# mvc 패턴
1. 모델 1구조
	1) jsp을 이용한 단순한 모델
		페이지와 요청값 전달 ==> 해당 페이지 호출
	2) jsp에서 요청 처리 및 뷰 생성 처리
		- 구현이 쉬움
		- 요청 처리 및 뷰 생성 코드가 뒤섞여 코드가 복잡함
2. 모델 2구조(MVC)
	1) 서블릿이 요청을 처리하고 jsp가 뷰를 생성
		요청 url ==> 서블릿 호출(controller) ==> 모델 데이터 설정
		==> view단 호출(jsp 파일) ==> jsp(모델 데이터 el/jstl출력)
		==> client에 결과를 전달
	2) 모든 요청을 단일 서블릿에서 처리
		- 요청 처리 후 결과를 보여줄 jsp로 이동
3. MVC란?
	1) Model-View-Controller
		-  모델 : 비즈니스 영역의 상태 정보를 처리한다. 주로 DAO에 전달된 데이터를 로직에 의해서 모델 데이터를 만든다.
			View에 전달될 핵심 데이터 처리
			controller단에서 이 데이터를 request.setAttribute("모델명", 데이터)로 설정한다.
			백엔드 자바단에서 핵심 데이터는 모델을 만들기 위해 추가적으로 service 객체, dao 객체가 필요로 한다.
			service : 비지니스 로직(알고리즘), 
			dao : database access object - DB처리 객체
			return해서 결과값을 다시 전달해주어 모델 객체를 만든다.
			
		- 뷰 : 비즈니스 영역에 대한 받은 핵심데이터(모델)을 controller에서 전달 받아,
			사용자가 보게 될 화면을 처리하는 역할을 한다.
			모델데이터 jsp에서 el,jstl로 활용한다.
			
		- 컨트롤러 : 사용자의 요청 페이지, 요청값 등을 전달 받고,
			dao 등을 통해 만들어진 모델데이터를 설정하고,
			이 모델데이터를 view단을 호출함과 동시에 전달하는 역할을 한다.
			즉, 중재자 역할을 주로 한다.
4. 모델 클래스 처리 내용
	1) controller부터 요청 받은 
	2) 비즈니스 로직 수행
	3) 수행 결과 컨트롤러에 전달.
	
# MVC 예제
1. 1단계
	controller ==> 모델데이터 설정 ==> view 바로 호출
2. 2단계
	controller ==> 모델데이터 설정 ==> view 호출
3. 3단계
	요청값 ==> controller ==> 모델데이터 설정 ==> view 호출
4. 4단계
	1) 화면단 처리
	요청값 ==> controller ===> dao호출 모델데이터 설정 ==> view 호출
	2) ajax 처리
	
# java단의 처리
	controller ==>  service 			==> dao ==> DB Server
	 [servlet]		모델을 만들기 위한 객체
	1. 요청값 처리
	2. 모델데이터 선언
	3. 뷰단 호출
	
# MVC 2단계
1. controller단에서 모델 데이터 설정
	request.setAttribute("모델명", 모델데이터);
2. view단에서 모델값으로 화면출력
	${모델명}, ${모델명.property}

# MVC 3단계
1. 요청값 처리
	request.getParameter("요청키")
2. 모델처리
	request.setAttribute("모델명", 모델데이터);
3. view단 호출
4. jsp
	el/jsp 활용
	
ex) 구구단 예제 :
	1) 요구사항
	초기 화면이 입력값 단수(2~9)와 카운트(1~9)
	select로 선택하게 한다. 결과를 클릭했을 때,
	해당 값이 아래에 출력된다.
	2) 사용할 파일 및 프로세스 정
		Controller(A06_GugMvc.java, \gugu.do)
		View(WEB-INF\a01_mvc\a06_guguView.jsp)
		
		초기에 입력을 할수 있게 form을 만들고, 계산이라는 버튼이 나오게 한다.
		계산 버튼 클릭시, 요청값과 함게 controller에 호출되고 controller에서는 입력된 값을 받아, 
		숫자형태로 만들어 최종으로 들어갈 모델 데이터를 @@ X @@ = @@로 설정한다.
		view단에서 el로 모델 데이터를 호출하게 한다.
	3) 파일별 핵심 코드
		Controller(A06_GugMvc, \gugu.do)
		요청값
		String num01S = request.getParameter("num01");
		String num02S = request.getParameter("num02");
		모델데이터
		if(num01S!=null){ //초기화면과 구분
			int num01 = Integer.parseInt(num01S);
			int num02 = Integer.parseInt(num02S);
			request.setAttribute("result",
				num01 +" x " + num02 + " = " +
			(num01*num02));
		}
		뷰단 호출.
		String page = "\WEB-INF\a01_mvc\a06_guguView.jsp";
		request.getRequestDispatcher(page).forward(request,response);
		뷰단 코드
		
		<form action="\gugu.do"> // action은 현재 view를 호출할 controller를 호출할 때는 생략 가능
			<input type="text" name="num01" /> X
			<input type="text" name="num02" /> ?<br>
			==> 구구단의 단수/카운트는 select로..
			<input type="submit" value="계산" />
		</form>
		<h2>${result}</h2>
	4) 적용
		
# MVC 4단계
1. DB연동하여 검색 처리하는 화면 구현
2. 핵심 로직
	1) 요청값 처리 : 검색할 데이터
	2) 모델 데이터 : 검색할 데이터를 VO객체로 만들어
		Dao를 호출한 후, 해당 메서드의 파라미터로 전달한다.
		controller ==>	service ==> dao 호출 (생략)
		controller에서 dao호출하여 모델데이터 설정..
		
	3) 뷰단 호출
		 
# MVC 4단계 1
1. mvc 패턴으로 초기화면을 로딩하고, 검색 키워드를 입력하고, 
	검색버튼을 클릭 시, 다시 컨트롤단을 호출하여 해당 키워드 관련 데이터를 DB로 가져와서 출력하는 프로그램
2. 주요 프로세스 및 파일
	1) controller(A07_EmpController.java, /empList.do)
		검색할 내용을 사원명, 직책명, 급여(시작~마지막)을 요청값을 받아, 위 값이 null이 아니면 Service단에 해당 요청값을
		VO로 만들어 전달, 전달하여 DB 처리된 값을 모델데이터에 할당하고, 뷰단을 호출한다.
		
	2) service(A08_EmpService.java)
		controller에서 넘겨온 요청값을 가진 Emp VO객체를
		Dao에 호출하여 list 데이터를 리턴하여 controller단에 넘긴다. 
	3) view(a07_empList.jsp)
		사원 정보 검색화면으로 form으로 사원명, 직책명, 급여와 함께 controller에서 넘겨온 사원정보 list를 jstl로 반복하여 출력한다.
		
3. 핵심코드
	1) controller(A07_EmpController.java)
		A07_EmpController(){
			A08_EmpService service = new A08_EmpService
		}
		String ename = request.getParameter("ename");
		String job = request.getParameter("job");
		String frSalS = request.getParameter("frSal");
		String toSalS = request.getParameter("toSal");
		if(ename==null) ename = "";
		if(job==null) job = "";
		if(frSalS==null) frSalS = "0";
		if(toSalS==null) toSalS = "99999";
		int frSal = Integer.parseInt(frSalS);
		int toSal = Integer.parseInt(toSalS);
		Emp sch = new Emp(ename,job,frSal,toSal);
		// 모델 데이터 선언
		// 생성자를 통해서 서비스단 객체 생성
		request.setAttribute("empList",service.empList(sch));
		// 뷰단 호출
		String page = "a07_empList.jsp";
		request.getRequestDispatcher(page).forward(request,response);
		}
	2) service(A08_EmpService.java)
		A08_EmpService(){
			A02_EmpDao dao = new A02_EmpDao();
		}
		public List<Emp> empList(Emp sch){
			return dao.getEmpSch(sch);
		}
	3) view(a07_empList.jsp)
		<form method="post">
		사원명:<input name="ename" value="${param.ename}"
		직책:<input name="job" value="${param.job}"
		급여(시작):<input name="frSal" value="${param.frSal}"
		급여(마지막):<input name="toSal" value="${param.toSal}"
		
		<c:forEach var="emp" items="${empList}">
			<tr><td>${emp.empno}</td><td>${emp.ename}</td>
				<td>${emp.job}</td><td>${emp.mgr}</td>
				<td>${emp.hiredate}</td><td>${emp.sal}</td>
				<td>${emp.deptno}</td>
			</tr>
# Controller,service단 생성
1. Dao 생성(확인)
2. Service단 만들기
3. Controller만들기

# 이해를 위한 설명
- 고급 식당에 방문한 손님과 서빙, 주방장
1. 브라우저 url (손님이 스파게티주문-카르보나) 
	- 브라우저에서 url통해 특정한 정보를 호출
		스파게티(페이지)
		카르보나(요청값)
2. Controller(서블릿 java) - 서빙받고 전달하는 사람(중재자)
	3. Service 주방장
		4. Dao	요리를 완성
	5. 화면단(view) 담는 그릇(이쁜 접시에 좋은 데코)
3. View(jsp) 카르보나 스파게티를 좋은 모양에 담아서 손님에게 전달

# MVC활용한 json 데이터 처리(ajax 처리)
1. 프로세스
	1) controller단에 의해 초기 화면 로딩 : html 
	2) key이벤트에 의해서 ajax호출(요청값 전달)
	3) controller단에서 요청값 전달
	4) 전달할 json 문자열 만들기(List객체 ==> json 문자열)
	5) client단에서 받은 json문자열 객체로 변환 : JSON.parse()
	6) js 반복 처리로 출력 처리
2. 핵심 코드
	1) controller(A10_AjaxCtrl.java /empAjax.do)
		// 요청값 처리
		//http://localhost:7080/empAjax.do
		String ename = request.getParameter("ename");
		String job = request.getParameter("job");
		String frSal = request.getParameter("frSal");
		String toSal = request.getParameter("toSal");
		// 서비스 호출
		String json = service.empAjax(ename,job,frSal,toSal);
		
		//view (초기화면/json데이터)
		if(ename==null){
			request.getRequestDispatcher("WEB-INF\\\\a01_mvc\\\\a10_ajaxEmp.html").forward(request, response);
		}else{
			PrintWriter out = response.getWriter();
			out.print(json); // xhr.responseText
		}
	2) service/dao(A08_EmpService.java, A02_EmpDao.java)
	
	3) view(a10_ajaxEmp.html) 
		사원명:<input type="text" name="ename" class="schFrm"/>
		직책명:<input type="text" name="job" class="schFrm"/>
		급여(시작):<input type="text" name="frSal" class="schFrm"/>
		급여(마지막):<input type="text" name="toSal" class="schFrm"/>
		<table id="empTab">
			<thead>
				<th>사원번호</th><th>사원명</th>
				<th>관리자번호</th><th>급여</th>
				<th>보너스</th><th>부서명</th>
			<tbody>
		<script>
		var enameObj = document.querySelector("[name=ename]");
		var jobObj = document.querySelector("[name=job]");
		var frSalObj = document.querySelector("[name=frSal]");
		var toSalObj = document.querySelector("[name=toSal]");
		var schFrms = document.querySelectorAll(".schFrms"); // 배열인 변수는 뒤에 s를 붙이는게 좋음.
		schFrms.forEach(function(sch){
			sch.onkeyup=function(){
				if(event.keyCode==13){
					callAjax();
				}
			}
		})
		
		function callAjax(){
			var xhr = new XMLHttpRequest()
			var ename = enameObj.value // 코드가 복잡해질 경우, enameVal로 해도 좋음
			var job = jobObj.value
			var frSal = frSalObj.value
			var toSal = toSalObj.value
			var qsr = "ename="+ename+"&job="+job
				+"&frSal="+frSal+"&toSal="+toSal
			xhr.open("get","/empAjax.do?"+qsr,true)
			xhr.send()
			xhr.onreadystatechage=function(){
				if(xhr.readyState==4&&xhr.status==200){
					console.log(xhr.responseText)
					// 문자열 json데이터가 js의 객체로 변환
					var empList = JSON.parse(xhr.responseText);
					// 반복문을 통해서 html을 만들어
					// 출력할 body에 할당처리.
				}
			}
		}
연습예제
1. 파일생성
	controller
		A11_AjaxDept.java(/ajaxDept.do)
	view
		a11_ajaxDept.html
	service
		A12_DeptService.java
			A06_PareparedDao.java
			getDeptList(Dept sch) 메서드 활용
2. 뷰단 화면 구현 및 초기 화면 호출
	a11_ajaxDept.html
	검색 : dname, loc
	리스트 테이블 : 부서번호, 부서명
	이벤트 처리
		keyup 시 console.log로 초기 데이터 출력

3. service 구현
	dao 호출
	public String getDeptAjax(String dname, String loc){
		return "";
	}
	public List<Dept> getDeptList(){
		return dao.getDeptList(sch);
	}
4. 컨트롤러 처리 및 이벤트 처리 완료
		
	
	