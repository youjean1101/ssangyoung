# 웹소켓통신을 통한 실시간 채팅
1. 웹프로그램에서 채팅을 중요한 기술 중에 하나이다.
2. 특정 사이트에서 실시간으로 채팅을 관리자나 상담자등으로 할 수 있는 것을 보았을 것이다.
3. 이와 같은 실시간으로 사이트를 사용하는 관리자나 사용자와 채팅을 할 수 있다면 
	효율적인 웹서비스를 제공할 수 있다.
4. 핵심 기술 내용
	1) 웹 소켓 통신
		- 소켓 통신이란 네트워크 상에서 데이터를 전송할 수 있는 기술을 말한다.
		- 보통 소켓 통신은 클라이언트 프로그램과 서버프로그램으로 나누어서 처리
			클라이언트 프로그램은 서버에 접속해서 데이터를 전달하고,
			전달받은 프로그램이고,
			서버 프로그램을 이러한 클라이언트 요청에 따라 데이터를 전송해주는 프로그램이다.
		- 웹소켓 통신이란 웹 서버 기반으로 웹프로그램에서 소켓으로 통신을 할 수 있는 것을 말한다.
			서버 프로그램
				웹서버 안에 특정한 컨테이너 핸들러 설정(자바) : 클라이언트 요청을 받아서 푸시방식으로
													다른 클라이언트에 요청을 전달
			클라이언트 프로그램
				js에서 이벤트에 의해 메시지를 서버에 전달하거나, 
				실시간으로 전달해보는 데이터를 화면에 출력 처리되게 한다.
				
	2) 실시간 처리
		- 웹 서버기반 프로그램에서 실시간으로 처리할려면,
		- 클라이언트가 요청했을 때, 서버에서는 접속한 다른 클라이언트에게 
			push방식으로 데이터를 처리해주어야 실시간 처리가 된다.
						  서버
		
			클라이언트1		클라이언트2		클라이언트3
		- 위와 같이 클라이언트1이 이벤트에 의해 서버에 데이터를 전송하면
			클라이언트2와 클라이언트3은 서버에서 데이터를 push방식으로 밀어서 
			데이터가 처리되는 것을 할 수 있다.
5. 채팅 처리 프로세스
	0) back단 : 서버안에 was가 로딩됨과 동시에 컨테이너에 소켓통신을 위한
				모듈과 클라이언트로 부터 데이터가 왔을 때, 처리되는 모듈을 메모리로
				로딩되어 웹 소켓을 위한 백엔드 처리를 위한 준비를 끝낸다. 
				초기 채팅하는 화면을 호출한 컨트롤러를 url에 의해서 처리된다.
	1) front단 : url에 연동되어 있는 채팅하는 화면을 로딩한다.
	2) front단 : 채팅하는 사용자 UI에 사용자명을 입력하고 접속버튼을 클릭하면, 
				이와 연결되어 있는 이벤트 핸들러 js함수에 의해 웹소켓으로 서버에 접속하게 한다.
	3) back단 : 클라이언트에 의해 소켓 접속 session이 들어오면, 
				서버단에 있는 핸들러 객체를 이 소켓 접속 session을 하나씩 누적하여 저장한다.
	4) front단 : 일단 클라이언트들이 서버에 소켓에 접속하면 메시지를 보낸다.
	5) back단 : 특정 클라이언트에 의해 요청받은 메시지는 비즈니스 로직에 의해 등록된 
				다른 대상 클라이언트에서 해당 메시지를 보낸다.
	6) front단 : 서버에서 push방식으로 오는 메시지를 접속한 소켓객체(js)를 통해 받아서 
				화면 ui로 메시지를 로딩되어 출력된다.
				이러한 내용은 계속 클라이언트들 간에 주고 받으면서 채팅을 한다.
	7) front단 : 대화가 끝나면 접속 종료 버튼을 클릭하여 서버에 요청한다.
	8) back단 : 클라이언트에 의해 접속 종료 이벤트가 오면 해당 핸들러 기능 메서드를 통해서
				누적되어 있는 접속 session가운데 해당 클라이언트를 삭제 처리한다.
	
6. 개발 순서
	1) 자바로 서버단에서 처리하는 핸들러 클래스를 선언
		- 필드로 접속자 세션 선언
			
		- 클라이언트 세션의 접속과 등록[1번서버메서드]
			- 접속과 함께 전역변수에 접속한 소켓세션 누적
		- 메시지 처리[2번서버메서드]
			- 받은 메시지를 등록되어 있는 누적된 소켓세션에게 전달
		- 클라이언트 세션 접속 종료[3번서버메서드]
			- 전역변수에 등록도디어 있는 소켓세션 중에 하나를 제외시킨다.
		- 예외 처리
	2) 웹 소켓 통신 기본 모듈 컨테이너에 등록, 설정 값 컨테이너에 설정
		- 선언한 핸들러 클래스를 객체로 등록 처리
			통신 서버 url
	3) 웹 채팅 화면 로딩
		- controller/url설정
		- 화면단 호출
	4) 웹 채팅 클라이언트 화면(jsp)
		- 채팅하는 화면 ui구현
			- 접속자 입력
			- 메시지 처리
			- 접속시작/접속종료/메시지 버튼과 이벤트 핸들러 처리
			- 채팅자명(입력), 전송할 메시지(입력), 
				채팅 내용(출력) (채팅할 사람-1:1, 그룹채팅)
				
		- 이벤트 핸들러에 의해 기능 처리
			- 접속 시작 : 
				접속자 아이디를 입력해서 접속 버튼을 클릭시
				js로 서버와 접속하는 웹 소켓 클라이언트 객체 생성
				컨테이너에 선언한 통신 서버 url
				위에 선언한 [1번서버메서드]호출
			- 메시지 전송
				접속자를 메시지를 입력하고 전송버튼을 클릭 시,
				웹 소켓 클라이언트 객체 기능메서드에 의해서 서버의 
				기능 메시지 전송 메서드를 호출한다.[2번서버메서드]
			- 메시지를 받은 핸들러 메서드
				서버에서 온 메시지를 클라이언트 화면에 로딩된다.
				ex) @@@님 안녕하세요.
			- 종료 처리
				접속자를 접속종료 버튼을 통해서, 서버의 접속 종료
				메서드를 호출한다.[3번서버메서드]
# 채팅화면 이벤트 핸들러 주요 기능
1. 접속버튼 클릭
	웹 소켓 서버와 연동하여 접속하게 한다.
2. 메시지입력 후, 메시지 전송 버튼 클릭/enter
	서버에 메시지 전송 처리
3. 서버에서 오는 메시지 받기(서버에 오는 push데이터 처리)
	메시지에서 서버에 오는 메시지를 받아서 출력되게 처리
4. 접속종료
	서버에 접속 종료 처리 메서드 호출.
	
			
				
			
		