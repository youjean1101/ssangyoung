# DI(dependency injection)
1. spring framework에서 사용되는 컨테이너의 처리개념이다.
	스프링 프레임웍의 핵심 개념으로 이에 대한 이론과 실제 처리 방법을
	확인하고, 스프링의 환경설정과 객체 사용에 대한 명확한 기준을
	정립하고 활용할 수 있게 된다.
2. 지시계열화 순서
	1) 스프링에서 객체 사용 메커니즘
		만능키트와 같은 컨테이너(dispatcher-servlet.xml) 
		==> 스프링에서 핵심 객체들을 컨테이너 메모리에 올려서
		호출하게 한다.
		
		즉, 스프링 웹 프로그래밍은 다음과 같은 과정을 거쳐서 처리된다.
		url로 주소와 요청값 전달 ==> 웹서버 호출 ==>
		웹서버안에 web.xml ==> 컨테이너 호출(dispatcher-servlet.xml)
		==> 객체 메모리 로딩 ==> 특정 호출 mapping controller
		호출 및 메서드 호출 ==> 모델처리(service, dao처리후)
		==> view단 호출 ==> 화면단을 클라이언트에 전달
		
		# 컨테이너설정 발전
		1. xml로 선언 설정
		2. 클래스에 객체로 선언
		3. 공통부분은 모두 다 자동 설정
			- 추가 변경이 필요한 부분 file로 설정해서
				사용 key=value
	
		
	2) IOC(Inversion of controller)이해
		제어권의 역전이란?
			객체의 생성, 사용, 소멸로 처리되는 생명 주기의 관리까지
			기존에 개발자의 각 객체 안에서 호출해서 처리되는 내용을
			컨테이너에 의해서 처리 되게끔 객체에 대한 제어권을
			바뀌었다는 것을 의미한다.
			컴포넌트 의존 관계 결정, 설정 및 생명 주기를 해결하기 위한
			디자인 패턴를 말한다.
			스프링 프레임웍크도 객체에 대한 생성 및 생명주기를 관리할 수 있는
			기능을 제공하고 있음을 말하고, 이것을 IOC라고 한다.
			IOC는 컨테이너에서 객체의 생성을 책임지고, 의존성을 관리한다.
			의존성관리란 객체간에 Controller==> service ==> Dao 형태로
			상호의존을 하여 처리하는 것을 말하고, 이것한 것을 컨테이너에서
			관리하는 것을 말한다.
			# 메모리에 컨테이너에 핵심 객체들이 로딩되어 있기 때문에
			new XXX()를 활용하여 객체를 생성할 필요없이, 바로 객체를
			선언된 내용으로 활용이 가능한다.
	
	3) IOC에서 파생하는 개념들
		DL(Dependency Loopup) 컨테이너에 저장된 객체들을 찾을 때, 사용되는 키워드 또는 개념
		- Setter Injection
		- Constructor Injection
		- Method Injection
		==> autowiring으로 객체간의 자동 연관 처리 개념으로 발전
		ex) Controller, Service, Dao 컨테이너에서 메모리 로딩
			// Setter Injection
			public void setService(Service service){
				this.service = service;
			} 
			// 이렇게 직접적으로 코드하지 않더라도
			// IOC에 의해 자동을 할당이 되는 개념이 autowiring
			// 이다.
			controller.setService(new Serivce())
			
			
	4) DI 사용 메서드
	5) 스프링 컨테이너 활용 실습
		- xml에 java를 효과적으로 선언할당 수 있는 간편한 방식
		- 가상의 컨테이너 환경을 만들어서 case by case로 실습을 하고
			현재 컨테이너에 적용해서 적용하도록 한다.
		- 환경 설정
			src java바로 밑에 a01_diexp폴드 생성
				
				- DIExp10.java,  di10.xml  z01_vo 패키지
					di10.xml(가상컨테이너)
					DIExp10.java(컨테이너에 있는 객체를 DL로 호출해서 활용)	
				- DIExp11.java,  di11.xml	
				- DIExp12.java,  di12.xml	
# 1:다 관계 객체 설정.
1. 클래스와 관계 구조가운데 1:1관계에 이어 1:다 관계 처리를 해주는
	구조가 있는데, 이런 내용도 컨테이너에 선언하여 활용할 수 있다.
2. 클래스 선언(포함할 객체)
	class Mart{
	 public void setPlist(List<Product> plist){
	 	this.plist = plist
	 }
3. 컨테이너 선언
	<bean id="prod01" class="@@@@.Product"/>	 
	<bean id="prod02" class="@@@@.Product"/>	 
	<bean id="prod03" class="@@@@.Product"/>
	<bean id="mt01" class="@@@.Mart">
		<property name="plist"
			<list>
				<ref bean = "prod01"/> 
				<ref bean = "prod02"/> 
				<ref bean = "prod03"/> 
# 여러가지 구조체를 컨테이너에 할당 및 설정 처리
1. 자바에서 선언된 여러가지 구조체도 컨테이너에서 할당 및 처리할 수 있다.
	1) list
		public void setPlist(List<Product> add){}
		
		<property name="plist>
			<list>
	2) set(중복불가)
		public void setAgent(Set<String> agent){}
		<property name="agent">
			<set
				value 입력값
	3) map(key/value)		 
		public void setConfig(Map<String, 
							Integer> config){}
		<propertyp name="config"
			<entry>
				key/value형식 처리
	4) Properties : key/value형식 collection
			prop key=""/value
			
# namespace를 활용하여, 생성자나 property의 간편한 사용
1. 컨테이너 xml dd 부분 선언
	xmlns:p="XXXX"
	xmlns:c="XXXX
	형식으로 선언이 되어 있어야 한다.
2. property 선언 변경
	<bean
		<property name="프로퍼티명" value="데이터할당"
		<property name="프로퍼티명" ref="참조명"
	==>
	<bean p:프로퍼티명 = "데이터할당" 
		  p:프로퍼터명-ref = "참조명"
	형식으로 변경하여 보다 코드를 간편화 한다.
3. constructor 선언변경
	<bean
		<constructor-arg>데이터설정
		<constructor-arg>참조명
	==>
	<bean c:생성자매개변수=데이터할당
		  c:_0 ="데이터할당		
		  c:_1 ="데이터할당
		  c:생성자매개변수-ref="참조명"
# 의존성 자동 주입 설정
1. 컨테이너는 여러가지 객체들이 선언하여 메모리에 로딩되어 사용할 수 있다.
2. 이때, 서로 연관관계가 있는 객체 즉, 메서드나 필드에 선언되어 호출되는
	관계의 객체들이 있다.
	ex) EmpController.java
			private EmpService service;
		EmpService.java
			private EmpDao dao;	
3. 컨테이너에서 autowiring 옵션을 이용하면, 객체가 현재 메모리에 로딩된
	상태이기에 바로 new XXXX() 형태로 객체를 생성하여 할당 없이 처리가
	가능한데 이것을 의존성 자동 주입 설정이라고 한다.
4. 의존성 자동 주입 설정 옵선
	1) autowire="byType"
		스프링 컨테이너 메모리가 해당 객체 타입으로 들어올 수 있는
		메서드가 정의가 되어 있으면 자동으로 할당이 되게 처리하는 것을
		말한다.
		ex) public void setHandPhone(HandPhone phone){
	2) autowire="byName"
		byType은 컨테이너에 들어올 수 있는 객체가 하나일 때, 처리가 
		가능한데, 특정 객체가 여러 개 선언되어 있는 경우 byName으로 하면
		일단 type이 같고 id값이 같은 property가 있는 메서드가 
		있을 경우 할당하는 것을 말한다.
	3) autowire="constructor"
		생성자를 통해서 해당 타입이 할당될 때, 자동 주입된다.
	4) autowire="autodetect"
		우선 할당할 수 있는 생성자를 살피고, 없을 때는 기능메서드살펴서
		byType으로 할당한다.
	5) autowire="no"
		자동 주입을 하지 못하게 한다. default이다.
# 패키지 단위 자동 클래스 선언
1. 컨테이너 설정 옵션가운데 특정한 패키지와 각 클래스마다 선언된 annotation(
	@Component/@Controller/@Service/@Repository)기준으로 자동으로 선언하게 하여,
	was(tomcat)이 로딩되고, 첫번째 controller를 호출할 때, 메모리에 로딩하게
	처리하는 기능을 지원한다.
2. 이런 객체들은 id값은 default로 클래스명의 소문자 시작으로 자동 설정이된다.
3. 변경이 필요할 때는 annotation설정에 (ex) @Controller("변경아이디")) 형식으로
	선언하면 된다.
4. 기본형식:컨테이너안에 선언
	 1) <context:component-scan base-package="적용할 최상위패키지명">
	 	- 일단, @Component로 선언된 모든 클래스는 자동으로 메모리에 로딩된다.
	 2) 특정 패키지에 있는 객체들을 @Component선언없이 메모리 로딩할려면 
	 	아래의 옵션을 추가하여야 한다.
	 	<context:component-scan base-package="적용할 최상위패키지명">
	 		<context:include-filter type="regex" expression=".*"/>
	 		정규식표현식에 해당하는 클래스를 메모리에 로딩하는 것을 .*란 하위에 있는
	 		모든 클래스를 지칭한다.
# 의존성 주입을 각 클래스에서 선언하여 처리하기
1. 지금까지 의존성 주입을 컨테이너에서 autowire 옵션을 통해 처리하였다.
2. component-scan 기능을 통해서 객체를 컨테이너에 로딩하면,
	이에 대한 의존성 주입을 컨테이너에서 처리하다는 건 여간 번거러운 작업이 아니다.
3. 이에 각 코드에서 의존성 주입을 선언하여 처리함으로 효과적인
	개발을 도모하는 방법을 spring에서는 지원하고 있다.
4. 처리 단계
	1) component-scan 를 통해서 컨테이너에 객체 생성
	2) 해당 패키지에 클래스 생성시,component-scan
		에서 지정한 annotation 설정
	3) 주입할 객체 생성시,
		@Autowired(required=false)
		private 클래스명 참조명;
	4) 위 annotation 옵션으로 new 생성자() 없이도, 	
		컨테이너에 있는 객체가 해당 객체에 자동으로 주입된다.

# 스프링 backend단 컨테이너 설정 환경
1. 스프링은 backend단은 다음과 같은 구조로 처리되고 있다.
	Controller <==> Service <==> Dao <==> DB서버
2. 요청값을 받은 WAS는 web.xml과 front  controller단을 처리되어
	이와 연관관계가 있는 컨터이너를 거쳐 controller단에서 상호작용을 처리한다.
3. 위 객체들은 컨테이너에서 메모리를 로딩한 후 실행 된다.
4. 그리고, Autowired옵션에 의해서 객체들은 필드에 선언하여 연관관계를
	가지고 처리가 된다.
5. Database의 경우는 보통 서버마다 환경설정(ip,port,sid,계정, 비번)을
	Dao에서 처리할 때, 컨테이너에서 설정하는 경우가 많다.
	- 그래서, autowired 하기보다 컨테이너에서 클래스를 선언하여, 위에 
	필요한 속성값을 처리해주는 경우가 많다.(연결객체)
6. 그 외에서 컨테이너에 올려져 있다는 가정하에 호출하여 의존성 자동 주입 연결하여 
	사용하는경우가 많다.
7. 가상환경 설정
	1) DIExp21.java
		호출해서 테스트할 메인 화면, 
		Controller의 기능메서드에 의해, Service, Dao, DB처리가 된
		결과를 확인
	2) di21.xml
		a01_diexp.backend 패키지에 있는 클래스 자동 메모리 로딩 및
			DB.java의 DB연결 정보 설정
			
	3) a01_diexp.backend 패키지의 클래스
		- @Controller, @Service, @Dao를 통해 객체가 컨테이너에서
			자동 로딩 및 의존성 자동 주입으로 연관관계 설정
		- DB.java : 데이터 연결정보를 컨테이너에서 설정

		

					
			 	 			
					
		
		
				
			
			
	
	
			  		






				
	
	
	