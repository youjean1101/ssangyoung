# DI(dependency injection)
1. spring framework에서 사용되는 컨테이너의 처리개념이다.
	스프링 프레임웍의 핵심 개념으로 이에 대한 이론과 실제 처리 방법을 
	확인하고, 스프링의 환경설정과 객체 사용에 대한 명확한 기준을 정립하고 활용할 수 있게 된다.
2. 지시계열화 순서
	1) 스프링에서 객체 사용 매커니즘
		만능키트와 같은 컨테이너(dispatcher-servlet.xml)
		==> 스프링에서 핵심 객체들을 컨테이너 메모리에 올려서
		호출하게 한다.
		
		즉, 스프링 웹 프로그래밍은 다음과 같은 과정을 거쳐서 처리된다.
		url로 주소와 요청값 전달 ==> 웹서버 호출 ==>
		웹서버안에 web.xml ==> 컨테이너 호출(dispatcher-servlet.xml)
		==>객체 메모리 로딩 ==> 특정 호출 mapping controller
		호출 및 메서드 호출 ==> 모델 처리(service, dao처리 후)
		==> view단 호출 ==> 화면단을 클라이언트에 전달
		
	2) IOC(Inversion of controller) 이해
		제어권의 역전이란?
			객체의 생성, 사용 소멸로 처리되는 생명 주기의 관리까지
			기존에 개발자의 각 객체 안에서 호출해서 처리되는 내용을
			컨테이너에 의해서 처리되게끔 객체에 대한 제어권을 바뀌었다는 것을 의미한다.
			컴포넌트 의존 관계 결정, 설정 및 생명 주기를 해결하기 위한 디자인 패턴을 말한다.
			스프링 프레임워크도 객체에 대한 생성 및 생명주기를 관리할 수 있는 기능을 제공하고 있음을 말하고, 이것을 IOC라고 한다.
			IOC는 컨테이너에서 객체의 생성을 책임지고, 의존성을 관리한다.
			의존성관리란 객체간에 Controller==> service ==> Dao 형태로 상호의존을 하여 처리하는 것을 말하고, 이것한 것을 컨테이너에서
			관리하는 것을 말한다.
			# 메모리에 컨테이너에 핵심 객체들이 로딩되어 있기 때문에 new XXX()를 활용하여 갹채룰 생성할 필요없이, 바로 객체를
			선언된 내용으로 활용이 가능하다.
			
			
	3) IOC에서 파생하는 개념들
		DL(Dependency Loopup) 컨테이너에 저장된 객체들을 찾을 때, 사용되는 키워드 또는 개념
		- Setter Injection
		- Constructor Injection
		- Method Injection
		==> autowiring으로 객체간의 자동 연관 처리 개념으로 발전
		ex) Controller, Service, Dao 컨테이너에서 메모리 로딩
			// Setter Injection
			public void setService(Service service){
				this.service = service;
			}
			//이렇게 직접적으로 코드하지 않더라도
			// IOC에 의해 자동을 할당이 되는 개념이 autowiring 이다.
			controller.set(new Service())
			
	4) DI 사용 메서드
	5) 스프링 컨테이너 활용 실습
		- xml에 java를 효과적으로 선언할 수 있는 간편한 방식
		- 가상의 컨테이너 환경을 만들어서 case by case로 실습을 하고 현재 컨테이너에 적용해서 적용하도록 한다.
		- 환경설정
			src>java바로 밑에 a01_diexp폴드 생성
			
				- DIExp10.java, di10.xml	z01_vo 패키지
					di10.xml(가상컨테이너)
					DIExp10.java(컨테이너에 있는 객체를 DL로 호출해서 활용)
				- DIExp11.java, di11.xml
				- DIExp12.java, di12.xml

# 1: 다 관계 객체 설정.
1. 클래스와 관계 구조가운데 1:1관계에 이어 1:다 관계 처리를 해주는 구조가 있는데, 
	이런 내용도 컨테이너에 선언하여 활용할 수 있다.
2. 클래스 선언(포함할 객체)
	class Mart{
		public void setPlist(List<Product> plist){
			this.plist = plist
		}
	}
3. 컨테이너 선언
	<bean id="prod01" class="@@@@.Product"/>
	<bean id="prod02" class="@@@@.Product"/>
	<bean id="prod03" class="@@@@.Product"/>
	<bean id="mt01" class="@@@.Mart">
		<property name="plist"
			<list>
				<ref bean="prod01" />
				<ref bean="prod02" />
				<ref bean="prod03" />
# 여러가지 구조체를 컨테이너에 할당 및 설정 처리
1. 자바에서 선언된 여러가지 구조체도 컨테이너에서 할당 및 처리할 수 있다.
	1) list
		public void setPlist(List<Product> add){}
		
		<property name="plist>
			<list>
	2) set(중복불가)
		public void setAgent(Set<String> agent){}
		<property name="agent">
			<set
				value 입력값
	3) map(key/value)
		public void setConfig(Map<String, Integer> config){}
		<property name="config"
			<entry>
				key/value형식 처리
	4) Properties : key/value형식 collection
		prop key=""/value
				
# namespace를 활용하여, 생성자나 property의 간편한 사용
1. 컨테이너 xml dd부분 선언
	xmlns:p="XXXX"
	xmlns:c="XXXX"
	형식으로 선언이 되어 있어야 한다.
2. property 선언 변경
	<bean
		<property name="프로퍼티명" value="데이터할당"
		<property name="프로퍼티명" ref="참조명"
	==>
	<bean p:프로퍼티명 = "데이터 할당"
		  p:프로퍼티명-ref = "참조명"
	형식으로 변경하여 보다 코드를 간편화 한다.
3. constructor 선언변경
	<bean
		<constructor-arg>데이터 설정
		<constructor-arg>참조명
	==>
	<bean c:생성자매개변수=데이터할당
		  c:_0="데이터할당
		  c:_1="데이터할당
		  C:생성자매개변수-ref="참조명"
	p:프로퍼티명 = "데이터할당"
		
	

