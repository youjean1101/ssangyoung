# DI(dependency injection)
1. spring framework에서 사용되는 컨테이너의 처리개념이다.
	스프링 프레임웍의 핵심 개념으로 이에 대한 이론과 실제 처리 방법을 
	확인하고, 스프링의 환경설정과 객체 사용에 대한 명확한 기준을 정립하고 활용할 수 있게 된다.
2. 지시계열화 순서
	1) 스프링에서 객체 사용 매커니즘
		만능키트와 같은 컨테이너(dispatcher-servlet.xml)
		==> 스프링에서 핵심 객체들을 컨테이너 메모리에 올려서
		호출하게 한다.
		
		즉, 스프링 웹 프로그래밍은 다음과 같은 과정을 거쳐서 처리된다.
		url로 주소와 요청값 전달 ==> 웹서버 호출 ==>
		웹서버안에 web.xml ==> 컨테이너 호출(dispatcher-servlet.xml)
		==>객체 메모리 로딩 ==> 특정 호출 mapping controller
		호출 및 메서드 호출 ==> 모델 처리(service, dao처리 후)
		==> view단 호출 ==> 화면단을 클라이언트에 전달
		
	2) IOC(Inversion of controller) 이해
		제어권의 역전이란?
			객체의 생성, 사용 소멸로 처리되는 생명 주기의 관리까지
			기존에 개발자의 각 객체 안에서 호출해서 처리되는 내용을
			컨테이너에 의해서 처리되게끔 객체에 대한 제어권을 바뀌었다는 것을 의미한다.
			컴포넌트 의존 관계 결정, 설정 및 생명 주기를 해결하기 위한 디자인 패턴을 말한다.
			스프링 프레임워크도 객체에 대한 생성 및 생명주기를 관리할 수 있는 기능을 제공하고 있음을 말하고, 이것을 IOC라고 한다.
			IOC는 컨테이너에서 객체의 생성을 책임지고, 의존성을 관리한다.
			의존성관리란 객체간에 Controller==> service ==> Dao 형태로 상호의존을 하여 처리하는 것을 말하고, 이것한 것을 컨테이너에서
			관리하는 것을 말한다.
			
	3) IOC에서 파생하는 개념들
		DL(Dependency Loopup) 컨테이너에 저장된 객체들을 찾을 때, 사용되는 키워드 또는 개념
		- Setter Injection
		- Constructor Injection
		- Method Injection
		==> autowiring으로 객체간의 자동 연관 처리 개념으로 발전
		ex) Controller, Service, Dao 컨테이너에서 메모리 로딩
			// Setter Injection
			public void setService(Service service){
				this.service = service;
			}
			//이렇게 직접적으로 코드하지 않더라도
			// IOC에 의해 자동을 할당이 되는 개념이 autowiring 이다.
			controller.set(new Service())
			
	4) DI 사용 메서드
	5) 스프링 컨테이너 활용 실습
		- xml에 java를 효과적으로 선언할 수 있는 간편한 방식
		- 가상의 컨테이너 환경을 만들어서 case by case로 실습을 하고 현재 컨테이너에 적용해서 적용하도록 한다.
		- 환경설정
			src>java바로 밑에 a01_diexp폴드 생성
			
				- DIExp10.java, di10.xml	z01_vo 패키지
					di10.xml(가상컨테이너)
					DIExp10.java(컨테이너에 있는 객체를 DL로 호출해서 활용)
				- DIExp11.java, di11.xml
				- DIExp12.java, di12.xml
