
# 자바로 데이터베이스 연동하여 처리하기
1. 개요
	자바프로그램을 DB서버의  client로 만들어, 데이터베이스 서버와 연동하여
	실제 프로그램에서 처리하는 내용으로 조회/등록/수정/삭제 처리를 하는 것을 말한다.
2. 지식계열화
	1) 네트웍상 server/client개념 이해
		- DB 서버 접속을 위한 정보
		network
		
		client <======> Server
				 ip		port(서비스구분) - 웹서비스, 파일서버, smtp
				 		db명(XE) - 여러개의 DB를 사용할 때
				 		사용자(스키마)/패스워드 - 여러개의 계정을 사용
				 		
	2) sql에 대한 이해 - 등록/조회/수정/삭제
	3) 자바의 DB처리 기능 객체와 각 개체별 처리 순서에 대한 이해
	4) 자바의 DB처리 기능 기능메서드 이해와 실습
	5) 기능 처리 후, 데이터 내용 확인
3. 네트웤상 server/client개념 이해(DB서버 접속 정보)
	1) 서버에 접속계정이 만드어지면,
	2) DB서버에 client는 jdbc드라이버 설정, 아이디, 패스워드
		서버 주소, port, DB명, 계정, 비번으로 접속을 할 수 있다.
4. sql에 대한 이해 - 지금까지 연습한 sql문
	select, insert, update, delete
5. 자바의 DB처리 기능 객체와 각 객체별 처리 순서에 대한 이해
	1) database 서버 접속 객체
		연결객체(Connection), 대화객체(Statement),
		결과값처리객체(ResultSet), 자원해제(.close()),
		예외처리(try{}catch(SQLExpption e){})
	2) 전역변수로 위 핵심 객체를 선언
		private Connection con;
		private Statement stmt;
		private ResultSet rs;
	3) 기능별 메서드 선언
		public void setConnection(){} - DB연결을 위한 기본 기능메서드
		// 각 기능별 메서드 선언
		// 사원정보 조회(다중행)
		public List<Emp> getEmpList(Emp sch){}
		// 사원정보 조회(단일행)
		public Emp getEmp(int empno){}
		// 사원정보 입력
		public void insertEmp(Emp insert){}
		// 사원정보 수정
		public void updateEmp(Emp update){}
		// 사원정보 삭제
		public void deleteEmp(int empno){}
		
# 데이터베이스 연결 처리
1. 필요한 기본 객체
	1) jdbc 드라이버 프로그램 path 잡기
		- 각 DB서버 회사에서 데이터베이스 연결 및 처리 관련 공통부분을 java로 만들어
			클래스로 압축한 내용을 가지고 있다.
			현재 프로젝트에서 진행할 수 있도록 classPath 추가 설정
	2) class.forName("메인클래스")
		를 통해서 메모리에 로딩..
		ex) Class.forName("oracle.jdbc.driver.OracleDriver");
2. 필수 예외 처리..
	1) Class.forName() : 컴파일예외 처리.
		직접적으로 예외 처리(연결할때 1번만 필요하기 때문에) try{}catch
	2) DriverManager.getConnection(info,"scott","tiger");
		연결정보 SQLException : 컴파일예외 처리, throws로 예외를 위임처리..
		
3. 연결 객체 처리 프로세스
	1) 연관관계 객체
		드라이버 메모리로딩 ==> 특정서버에 접속 DriverManager ==>
		연결객체 Connection ==> 서버와 대화(sql) Statement 
		선택적 처리 ==> 등록/수정/삭제 ==> 서버에 데이터를 처리 ==> commit, rollback
				==> 조회(select) ==> 서버에서 sql결과를 ResultSet 통해 전달
				예시)전화기
					통신망 ==> 전화(연결) ==> 대화  ==> 돈을빌려줘등 결과값이 필요한 질문 ==> 결과값
				
		ResultSet : next() - 행단위로 이동 처리
					 getXXXX("컬럼명") - 열단위에 데이터 유형에 맞게 접근
						XXXX
						char/varchar2() ==> String 
						number() ==> int/double
						date ==> Date
				while(rs.next()){ ## 데이터가 마지마행까지 행단위로 이동
					rs.getInt("empno") : 각 행의 empno컬럼의 데이터를 정수형으로 가져옴
					rs.getString("ename")
					rs.getDate("hiredate")
				}
			==> 자원해제 및 예외처리
				만들어진 단계별 객체 .close() 메모리 해제
				필수예외에 대한 내용을 try{}catch(SQLException e){} 예외 처리
				

	Class.forName("") : jdbc 드라이버를 메모리에 로딩
	DriverManager : getConnetion("접속정보", "계정","비번") static 메서드로 연결을
		driver ==> 특정한 연결과 mapping
		Connection 객체를 만들어 준다.
			리턴을 연결객체를 통해서 처리한다.
		ex) 전화기를 하면 전화번호 대상과 연결해서 연결된 메모리객체를 Connection에 할당 처리
		"jdbc:oracle:thin:@localhost:1521:xe"
		jdbc:oracle:thin: 드라이버 종류
		@localhost : 특정 ip주소 cf) localhost - 현재 pc에 oracle서버가 구축되어 있을 때는
			localhost라는 loopback 주소를 사용한다.
		1521 : oracle 서버의 port
		xe : oracle DB명
		
# 매개변수에 의해 검색의 조건을 처리하는 기능메서드 만들기
1. 처리순서
	1) sql 만들어 실행
		SELECT * FROM emp01
		WHERE ename LIKE '%'||'A'||'%'
		AND job LIKE '%'||'ER'||'%'
	2) sql안에 조건으로 넘길 데이터 유형과 이름 정리
		ename, job
		==> String ename, String job
	3) 기능 메서드에 매개변수 타입 결정
		데이터유형으로 선언 : schEmp(String ename, String job)
		객체로 선언 : - vo 객체를 생성(ename, job 포함)
			schEmp(Emp sch)
	4) 문자열 sql에 동적문자열로 선언처리
		- 데이터유형으로 선언
		String sql = 	"SELECT * " +
						"FROM emp01" +
						"WHERE ename LIKE '%'||'"+ename+"'||'%'"+
						"AND job LIKE '%'||'"+job+"'||'%'";
		- 객체유형으로 선언
		String sql = 	"SELECT * " +
						"FROM emp01" +
						"WHERE ename LIKE '%'||'"+sch.getEname()+"'||'%'"+
						"AND job LIKE '%'||'"+sch.getJob+"'||'%'";
						
# 검색조건 처리 및 List로 리턴처리
1. sql 작성
	1) 매개변수로 조건처리할 데이터 확인
		==> ename, job ==> VO로 ename, job 필드 선언, 객체
	2) 리턴값으로 리턴 List의 단위 데이터 확인
		String sql = 	"SELECT * " +
						"FROM emp01" +
						"WHERE ename LIKE '%'||'"+sch.getEname()+"'||'%'"+
						"AND job LIKE '%'||'"+sch.getJob+"'||'%'";
		select * ==> 통해서 나올 데이터를 단위로 객체 선언
		empno, ename, job, mgr, hiredatem sal, comm, deptno
2. VO만들기
		==> 저장할 수 있는 단위 VO객체 선언 ==> ArrayList<VO>
			생성자로 전체데이터를 가져오는 생성자1
			생성자로 조회조건 가져오는 생성자2
		class Emp{
			private int empno;
			private String ename;
			private String job;
			private int mgr;
			private Date hiredate;
			private double sal;
			private double comm;
			private int deptno;
			
3. List 메서드 초기에 선언하고, while()를 통해서 객체 하나씩 생성해서 추가하기
	리턴할 기능메서드와 매개변수 처리할 내용 선언
	// Emp sch : 조건으로 처리할 데이터
	// public List<Emp> : select로 처리할 데이터 리스트화
	
	public List<Emp> getEmpListSch(Emp sch){
		List<Emp> list = new ArrayList<Emp>();
		
		return list;
	}
4. ResultSet 객체를 통해서 데이터를 가져와서 list에 while문을 통해서 할당.
	while(rs.next()){
		list.add(new Emp(rs.getInt("empno"),rs.getString("ename"),...
		}
		System.out.println("데이터 건수:"+list.size());
5. 호출하는 곳에서 향상된 for문으로 처리
	for(Emp emp:dao.getempListSch(new Emp("","")){
		System.out.println(emp.getEmpno());
	}
	
# 연습 단계
1. 전체 프로에 대한 이해
	0) 사전 지식
		- 예외 처리(컴파일 예외)
			try{}catch(ClassNotFoundException)
			try{}catch(SQLException)
	1) 연결(Connection) : ex) 전화기 - 통신망(jdbc메모리로딩), 전화번호(ip, port, db, 계정, 비번)
		메모리로딩 ==> 접근 정보에 따라 특정 서버에 연결
	2) 대화(Statement) : ex) 상대방과 대화
		필요한 sql 작업
			select ename, job, empno
			from emp
			where sal between @@ and @@
			and ename like '%'||''||'%'
		사용할 vo 생성
			select에 있는 name, job, empno ==> 받은 객체 선언.
			==> type과 이름 정하기 ==> 생성자 결정
			class Emp2{
				private String ename;
				private String job;
				private int empno;
				public Emp2(String ename, String job, int empno){
					this.ename = ename;
					this.job = job;
					this.empno = empno;
				}
			}
			where 부분에 들어갈 객체 만들기.
			where sal beween @@ and @@		int frSal, int toSal
			and ename like '%'||''||'%'		String ename;
			where 조건에 들어갈 데이터를 확인 vo객체 만들기
			==> 생성자 선언
			class EmpSch{
				private int frSal;
				private int toSal;
				private String ename;
				public EmpSch(int frSal, int toSal, String ename){
					this.frSal = frSal;
					this.toSal = toSal;
					this.ename = ename;
				}
			}
			==> 공통내용이 많으면 통합해서 사용.(select, where)
			class Emp3{
				private String ename;
				private String job;
				private int empno;
				private int frSal;
				private int toSal;
				public Emp3(int frSal, int toSal, String ename){
					this.frSal = frSal;
					this.toSal = toSal;
					this.ename = ename;
				}
				public Emp3(String ename, String job, int empno){
					this.ename = ename;
					this.job = job;
					this.empno = empno;
				}
			}
			기능 메서드 선언..
			1. 다중행을 가져오는 경우(sql의 결과)
			 public List<Emp2> getEmpListSch(EmpSch sch){
			 	List<Emp2> e = new ArrayList<Emp2>();
			 	return elist;
			 }
			2. 한개의 행의 가져오는 경우(select * from emp where empno = 7780);
			 public Emp2 getEmpListSch(int empno){
			 	emp2 e = null;
			 	
			 	return e;
			 }
			
		대화를 통해 의사 전달만(insert, update, delete) ==> commit(), rollback()
		대화를 통해 결과를 받는 것(select) 
		==> ResultSet(next()), getXXX("컬럼명"), getXXX(1))
				while(next()) 행단위로 이동
					rs.getString("컬럼"): 열단위로 이동
		==> 자원해제..
		
		