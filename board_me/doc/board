# 답변형 게시판
1. 주요 기능
	1) 초기 페이지 처리된 리스트 확인
		검색, 페이징처리(하단), 답글 : 계층형 sql 활용
	2) 등록 처리(답글 처리)
		기본 정보 등록(session으로 로그인된 사용자 id로 등록)
		첨부 파일 추가
	3) 상세화면
		수정 처리(session 작성자가 동일한 id인 경우만)
		삭제 처리(session 작성자가 동일한 id인 경우만)
		답글 처리
2. 개발 순서
	1) Database 설계
		메인 테이블(board) - 번호, 상위번호, 제목, 작성자, 내용
			등록일, 수정일, 조회수
		첨부파일 테이블(boardfile) - 번호(board의 번호), 파일명
			, 경로명, 등록일, 기타
	2) sql문 작성
		메일 조회 화면 sql
			가본 조회 sql
			답글을 리스트 되는 계층형 sql
		등록 sql
			메인 테이블(답글등록시와 동일)
			첨부 파일 테이블
		수정 sql
		삭제 sql
	3) vo 작성
		Board - list을 위한 VO
		BoardSch - 페이징 처리 및 기본 검색을 위한 vo
	4) DB 처리	
		dao
		mapper
	5) 비지니스 로직 처리
		service
	6) 요청값, 요청 url 및 모델, view를 위한 controller 처리
		
	7) 화면단 처리(view) 
		- 조회 화면
			- 조회 form
			- 데이터 리스트
			- 페이징 처리
		- 등록/답글 화면
			- 기본 등록 정보
			- 파일 업로드 처리
		- 상세화면 구현
			- 조회화면에서 상세화면 로딩

# 기본 스프링 환경 설정
0. 설정에 필요한 파일과 처리 구조
	- web.xml(board_me\src\main\webapp\WEB-INF\web.xml)
		ex) http://localhost:7080/board_me/list.do
		url로 요청했을 때, 처음 호출하는 파일 : do로 url이 끝날 때 스프링 호출
			<url-pattern>*.do2</url-pattern>
		스프링이 처리되는 front 컨트롤러와 컨테이너 설정 위치를 지정
			<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
			<param-value>classpath:resource/a01_container.xml</param-value>
		요청값에 대한 한글 encoding 처리
			<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	- a01_container.xml(board_me\src\main\java\resource\a01_container.xml)
		선언된 클래스를 객체로 로딩
		공통 설정 파일 위치를 선언해서 해당 파일에서 key=value형식으로 설정 데이터 처리
		<context:property-placeholder location="classpath:resource/a00_config"/>
			공통 key 를 통해 효과적으로 설정 정보 활용
		공통 mybatis 설정 정보
			<property name="configLocation" value="classpath:resource/a02_mybatis.xml"/>
		mybatis에 의해 실제 객체가 만들어 저는 dao 인터페이스 위치
			<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
      			<property name="basePackage" value="board"/>
      	view단에 대한 설정 정보
      		- jsp/json view 등
      		- 파일업로드/다운로드  view
      		
	- a00_config(board_me\src\main\java\resource\a00_config)
		공통 key를 통해 효과적으로 설정 정보 활용
		
	- a02_mybatis.xml(board_me\src\main\java\resource\a02_mybatis.xml)
		mapper.xml에서 간략하게 사용할 vo 선언
		<typeAlias alias="boardsch" type="board.vo.BoardSch"/>
		사용할 mapper.xml 설정 위치 지정
		<mapper resource="resource/a03_Mapper.xml"/>
		
	- a03_Mapper.xml(board_me\src\main\java\resource\a03_Mapper.xml)
		dao 인터페이스를 상속받는 실제 DB연결하여 결과값을 가져오는 객체를 만든다
		인터페이스, 	id,		 매개변수와 	리턴값이 dao와 연동 규칙을 지켜야한다.
		namespace 	메서드명	parameterType resultType/resultMap
		<mapper namespace="board.A03_Dao">
			<select id="boardList" resultType="board" parameterType="boardsch">
				select * 
				from board 
				WHERE 1=1
	
	- A01_Controller.java(controller)
		컨테이너에서 객체 로딩
		@Autowired에 의해 소스상 자동 객체 할당.
	- A02_Service.java(service)
		컨테이너에서 객체 로딩
		@Autowired에 의해 소스상 자동 객체 할당.
	- A03_Dao.java(dao)
		dao 인터페이스(껍데기) 
		==> 컨테이너()에서 패키지(a01_container.xml)를 지정하고,
		XXXMapper.xml에서 컨테이너에 연동 규칙에 의해 실제 객체가 만들어 진다.
	- Board.java, BoardSch.java(vo)
	
1. 컨테이너 분리
	<init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:resource/a01_container.xml</param-value>
    </init-param>
2. 설정 파일 - DB 접속, 파일업로드..
	<context:property-placeholder location="classpath:resource/a00_config"/>
	a00_config
		jdbc.driver=oracle.jdbc.driver.OracleDriver
		jdbc.url=jdbc:oracle:thin:@localhost:1521:xe
		jdbc.user=scott
		jdbc.pass=tiger
		
3. a01_container.xml 컨테이너
	1) 뷰단(jsp) - suffix, prefix 처리 호출
		<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		     <property name="order" value="1"/>
		     <property name="prefix" value="/WEB-INF/view/"/> <!-- 접두어 -->
		     <property name="suffix" value=".jsp"/> <!-- 접미어 -->
		   </bean>

	2) 기타 DB를 위한 설정 파일 위치 선언.

# 메인리스트 화면 처리(1단계) - 기본 조회
1. conctroller를 통한 초기 화면 호출
	url mapping
2. 초기 조회 화면 구현(UI구현)
	1) form 검색을 위한 요청값 name 선언 : subject, writer
	2) list화면 구성
		no, subject, writer, regdte, readcnt
		번호, 제목, 작성자, 등록일, 조회수
-------------------------------------------------------

3. DB처리를 위한 구성
	1) db생성/기본 데이터 입력
	2) 조회를 위한 sql
		select * from board
		where 1=1
		and subject like '%'||''||'%'
		and writer like '%'||''||'%'
		order by regdte
	3) vo 작성
		- 검색을 위한 BoardSch
			subject 제목
			content 내용
			-- 페이지 처리를 위해 추후, 추가..
		- 데이터 리스트를 위한 Board
			no 글번호
			refno 답글번호
			subject 제목
			content 내용
			writer 작성자
			readcnt 조회수
			regdte 등록일
			updte 수정일
	4) 공통 mybatis 등록 alias board, boardsch
		mapper 등록
	5) dao
		public List<Board> boardList(BoardSch sch);
	6) mapper 처리
		<select id="boardList" resultType="board" parameterType="boardsch">
			select * 
			from board 
			WHERE 1=1
			AND subject LIKE '%'||#{subject}||'%'
			AND writer LIKE '%'||#{writer}||'%'
			order by regdte desc
		</select>
		
# 데이터 등록 처리
1. 주요 프로세스
	1) 리스트 화면에서 등록 버튼 클릭 등록 화면 이동
	2) 등록 화면
		1) 등록할 form 데이터
			제목(subject), 작성자(writer), 내용(content)
			답글(refno-hedden)
			첨부파일
		2) 기능 버튼 : 등록, 리스트 화면
	3) 등록 컨트롤러
		- 등록 서비스, Dao를 통해 등록 처리
		- 등록 완료 메시지 모델 처리
	4) 등록 화면
		- 등록 완료 메시지 및 조회화면 이동/계속 등록 처리
2. 개발 순서
	1) DB
		- 등록 sql 작성
			insert into board values(board_seq.nextval,
				#{refno},#{subject},#{content},#{writer},0, sysdate, sysdate);
		- 등록을 위한 vo
		- 공통 mybatis
		- dao interface
			public void insertBoard(Board ins);
		- mapper
			<insert id="insertBoard" parameterType="board">
				insert into board values(board_seq.nextval,
				#{refno},#{subject},#{content},#{writer},0, sysdate, sysdate)
			</insert>
		
	2) service
		public void insertBoard(Board ins){
			dao.insertBoard(ins);
		}
	3) controller
		- 등록을 위한 form controller 메서드구현
			@GetMapping("/insertFrm.do")
			public String insertFrm(){
				return "a02_insertBoard";
			}
		- 등록 처리 controller 메서드 구현
			@PostMapping("/insert.do")
			public String insert(Board ins, Model d){
				service.insertBoard(ins);
				d.addAttribute("msg","등록성공");
				return "a02_insertBoard";
			}
		
	4) 뷰
		- 화면리스트 뷰에서 등록 버튼 클릭 시, 등록 처리 화면이동
			<button type="button" onclick="insertFrm()">
			function insertFrm(){
				location.href="${path}/insertFrm.do"
			}
			<button>조회화면</button>
		- 등록 form을 위한 화면 구현..
			#{refno}, #{subject},#{content},#{writer},
			<input name="refno" value="0" />
			<input name="subject" value=""/>..
# 수정/삭제를 위한 상세화면
1. 처리 프로세스 
	1) 리스트 화면에서 특정 데이터 더블 클릭 시,
	2) 해당 데이터에 있는 key인 no으로 요청값으로 하여
	3) 컨트롤러를 처리되어 
		- 이 글에 대한 조회수를 update한 후,
		- 이 글의 상세 데이터를 DB에 데이터를 가져온 후,
			이 모델데이터 기반으로
	4) 상세화면이 로딩된다.
		- 게시물 번호, 답글 번호, 작성자, 조회수, 등록일, 수정일, 내용
	5) 다음 단계를 위한 수정/삭제/답글/메인화면 기능 버튼과 함께 리스트 된다.

2. 개발 순서 및 핵심 코드
	1) DB처리
		- sql, 상세 조회/조회수
		 	SELECT * FROM board WHERE 
		 	NO=${no};
			UPDATE board 
				SET readcnt = readcnt+1
			WHERE NO =${no} 
		- vo
		- 공통
		- dao
			public Board getBoard(int no);
		- mapper
			<select id="getBoard" resultType="board" parameterType="int">
				SELECT * FROM board WHERE 
		 		NO=${no};
			</select>
			<update id="uptReadCnt" parameterType="int">
				UPDATE board 
				SET readcnt = readcnt+1
			WHERE NO =${no} 
			</update>
		- service
		
	2) controller 및 화면 구현
		- no 키를 받은 상세 요청 controller 구현
			@GetMapping("board.do")
			public String getBoard(@RequestParam("no") String no, Model d){
				service.uptReadCnt(no);
				d.addAttribute("board", service.getBoard(no))
				return "a03_board"
			}
		- 모델데이터 처리
		- 모델데이터 기반 상세화면 로딩
			게시물 번호, 답글 번호, 제목, 작성자, 조회수, 등록일, 수정일, 내용
	
	3) 화면단 구현
		- 리스트 화면
			<tr ondblclick="goDetail(${no})">
			function goDetail(no){
				location.href="${path}/board.do?no="+no
			}
		- 상세 화면(a03_board.jsp)
			<input name="no" value="${board.no}"/>
			<input name="refno" value="${board.refno}"/>
			<input name="subject" value="${board.subject}"/>
			<input name="writer" value="${board.writer}"/>
			<input name="readcnt" value="${board.readcnt}"/>
			<input value="${board.regdte}"/>
			<input value="${board.uptdte}"/>
			<textarea name="content">${board.content}</textarea>
	
# 게시판 첨부파일 처리 파일업로드
1. 진행 프로세스
	1) 등록화면에서 첨부파일을 등록하여 등록 처리를 하면
	2) DB에 첨부파일정보가 등록되고,
	3) 특정 폴드에 첨부파일이 업로드 된다.
	4) 해당 게시물의 상세정보를 확인하면 등록된 파일 정보도 함꼐 볼 수 있다.
	5) 파일명을 클릭 시, 다운로드되어 해당 첨부파일 내용을 볼 수 있다.
	
2. 개발 순서
	1) 핵심 소스
		공통환경 설정(업로드경로) : resource\a00_config
			uesr01.upload=webapp하위에 z01_upload폴드 지정
		컨테이너(업로드뷰):resource\a01_container.xml
			 <bean id="multipartResolver"
   				class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>
		컨트롤러 호출(업로드 기능메서드 추가) : A01_Controller.java
			// insert.do : 추가 코드 없음..
		서비스(업로드 처리 메서드 추가) : A02_Service.java
			private String uploadFile(MultiPartFile f) // 특정위치에 업로드
			public void insertBoard(Board ins){
					
					BoardFile f = new BoardFile()
					dao.insertUploadFile(f);
					uploadFile(ins.getReport());
					
		DB처리(업로드 정보 저장)
			A03_Dao.java
				public void insertUploadFile(BoardFile f);
			a02_mybatis.xml
				BoardFile ==> boardFile
			a03_Mapper.xml
				<select id="insertUploadFile" parameterType="boardFile"/>
		VO(업로드 처리 요청 객체 추가) : 
			Board.java (MultipartFile report, String fname)
			BoardFile.java(no, fname, regdte, uptdte, etc)
			
		화면단(파일 첨부 처리) : a02_insertBoard.jsp
			<form enctype="multipart"/form-data"
			<input type="file" name="report" />
		화면단(첨부된 리스트 처리) : a03_board.jsp
			<input value="${board.fname}"
	2) 환경 설정
		파일업로드 컨테이너 선언
			 <bean id="multipartResolver"
   				class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>
   				
		파일업로드할 파일서버 경로 위치 공통 설정파일 선언
			user.upload = C:/a01_javaexp/workspace/board_me/src/main/webapp/z01_upload/
	3) DB 처리
		테이블 생성
			create table boardfile(
				no number,
				fname varchar2(500),
				etc varchar2(500),
				regdte date,
				uptdate date
			)
			
		sql 작성
			insert into boardfile(board_seq.currval,
				'a01.txt', '파일등록', sysdate, sysdate);
			select fname 
			from boardfile
			where no = 1000
			
		vo 
			no, fname , etc, regdte, uptdte
			board fname
			
		mybatis 공통
			boardfile
			
		dao
			public void insertUploadFile(BoardFile f);
			public String getBoardFile(int no);
			
		mapper
			<insert id="insertUploadFile" parameterType="boardfile" />
					insert into boardfile(board_seq.currval, #{fname}, #{etc}, sysdate, sysdate);
		
		<select id="getBoard" resultType="board" parameterType="int">
			SELECT a.*,fname 
			FROM board a,boardfile b
			WHERE a.no =b.no(+)
			and NO = #{no}			
		</select>
		public Board getBoard(int no) {
				return dao.getBoard(no);
		}	
		<!--선택(위 내용 처리시 생략 가능)-->
			<select id="getBoardFile" parameterType="int" />
					select fname 
					from boardfile
					where no = #{no}
			</select>
	--------------------------------------------------------------	
		
	4) controller/service단 구현
			@Value("${user.upload")
			private String upload;
				
			private void uploadFile(MultipartFile f) {
				String fname = f.getOriginalFilename();
				File fObj = new File(upload+fname);
					try{
						f.transferTo(fObj);
					}catch(Exception e){
						System.out.println("업로드예외"+e.getMessage());
					}
			}
			public void insertBoard(Board ins){
				// 우선 기본 정보를 등록해서 no가 생성(board_seq.nextval)
				dao.insertBoard(ins);
				
				String fname = ins.getReport().getOriginalFilename();
				if( !fname.equals("")){
					uploadFile(ins.getReport());
					BoardFile f = new BoardFile();
					f.setFname(fname);
					f.setEtc(ins.getSubject());
					// 위 기본 정보에 있는 no와 동일한 no 입력(board_seq.currval)
					dao.insertUploadFile(f);
				}
			}
			public Board getBoard(int no) {
				Board b = dao.getBoard(no);
				b.setFname(dao.getBoardFile(no));
				return b;
			}
	5) 화면단 구현(등록)
		<form enctype="multipart/form-data">
	      <div class="custom-file">
	        <input type="file" name="report" class="custom-file-input" id="file01">
	        <label class="custom-file-label" for="file01">파일을 선택하세요!</label>
	       </div>
      	$(".custom-file-input").on("change",function(){
      		$(this).next(".custom-file-label").text($(this).val())
      	})
		
	6) 화면단 구현(상세화면)
	 	<input type="text" value="${board.fname}">
---------------------------------------------------------------------

# 게시판 상세화면에서 파일 다운로드
1. 프로세스
	1) 상세화면에서 파일을 클릭 시,
	2) 다운로드 컨트롤러를 파일명과 함께 전달
	3) 다운로드 컨트롤러에서 모델데이터 파일명 설정
	4) 다운로드 viewer 호출
2. 개발 순서
	1) 다운로드 viewer 구현
		- 모델명(파일명)
		A04_DownloadView.java
		@Value("${user.upload}") : 경로
		String fname = (String)model.get("downloadFile"); 파일명
		new File(upload+fname);
		==> FileInputStream ==> reponse.getOutStream() ==> 클라이언트에 전달.
	2) 다운로드 view 컨테이너에 등록
		<bean id="downloadView"	class="board.A04_DownloadView"/>
	3) 다운로드 컨트롤러 메서드 추가..
		요청값 : name
		모델명 name 설정
		다운로드 뷰어 호출..
		//  download.do?fname=@@@@
		@GetMapping("/download.do")
		public String download(@RequestParam("fname")String fname, Model d) {
			d.addAttribute("downloadFile", fname);
			return "downloadView";
		}
		
	4) 화면단(jsp)
		파일클릭 시, 컨트롤러 호출 location.href 선언
		<input id="downFile" value="${board.fname}">
		$("#downFile").click(function(){
	  		if(confirm($(this).val()+"을 다운로드하시겠습니까?")){
	  			location.href="${path}/download.do?fname="+$(this).val()
	  		}
	  	})
# 게시판 수정 처리
1. 프로세스
	1) 상세 화면에서
		수정할 데이터를 변경한 후, 수정 버튼을 클릭하면
	2) 수정 controller 호출
	3) 수정 service 호출
	4) DB 처리
		service ==> dao ==> mapper
	5) controller 메시지 "수정완료" 전달
	6) 화면단 수정 처리 메시지
		alert(msg);
		
2. 개발 순서
	1) DB 처리 service 호출
		sql 
			update board
				set content = #{content},
					subject = #{subject},
					uptdte = sysdate
			where no = #{no}
		vo, 공통 mybatis
		dao
			public void updateBoard(Board upt);
		mapper
			<update id="updateBoard" parameterType="board">
				update board
				set content = #{content},
					subject = #{subject},
					uptdte = sysdate
				where no = #{no}
			</update>
		
	2) controller 추가
		/boardUpt.do
		public String uptBoard(Board uptm Model d){
			service.updateBoard(upt);
			d.addAttribute("msg","수정완료");
			d.addAttribute("board", service.getBoard(upt.getNo()));
			return "";
		}
	3) 화면단
		- 수정 버튼 클릭 시, confirm 수정하시겠습니까?
		$("#uptBtn").click(function(){
			if(confirm("수정하시겠습니까?")){
				$("form").attr("action","${path}/boardUpt.do");
				$("form").submit();
			}
		})
		- 요청값 전달.
		var msg = "${msg}"
		if(msg=="수정완료"){
		if(confirm(msg+"전체 조회화면 이동하시겠습니까?")){
			location.href = "${path}/list.do";
		}

# 게시판 삭제 처리
1. DB처리
	sql delete from board where no = 1
	dao public void deleteBoard(int no);
	mapper
		<delete id="deleteBoard" parameterType="int">
			delete
			from board
			where no = #{no}
		</delete>
	service
	
2. controller 및 화면단 처리
	1) controller
	/delBoard.do
	2) jsp
	location.href = "delBoard.do?no="+no
	
